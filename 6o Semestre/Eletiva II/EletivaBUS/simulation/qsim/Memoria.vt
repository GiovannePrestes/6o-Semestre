// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/23/2019 01:22:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Memoria
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Memoria_vlg_sample_tst(
	Bit_0,
	Bit_1,
	Bit_2,
	Bit_3,
	mem_read,
	Mem_Write,
	Sel_0,
	Sel_1,
	sampler_tx
);
input  Bit_0;
input  Bit_1;
input  Bit_2;
input  Bit_3;
input  mem_read;
input  Mem_Write;
input  Sel_0;
input  Sel_1;
output sampler_tx;

reg sample;
time current_time;
always @(Bit_0 or Bit_1 or Bit_2 or Bit_3 or mem_read or Mem_Write or Sel_0 or Sel_1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Memoria_vlg_check_tst (
	Out_Bit0,
	Out_Bit1,
	Out_Bit2,
	Out_Bit3,
	sampler_rx
);
input  Out_Bit0;
input  Out_Bit1;
input  Out_Bit2;
input  Out_Bit3;
input sampler_rx;

reg  Out_Bit0_expected;
reg  Out_Bit1_expected;
reg  Out_Bit2_expected;
reg  Out_Bit3_expected;

reg  Out_Bit0_prev;
reg  Out_Bit1_prev;
reg  Out_Bit2_prev;
reg  Out_Bit3_prev;

reg  Out_Bit0_expected_prev;
reg  Out_Bit1_expected_prev;
reg  Out_Bit2_expected_prev;
reg  Out_Bit3_expected_prev;

reg  last_Out_Bit0_exp;
reg  last_Out_Bit1_exp;
reg  last_Out_Bit2_exp;
reg  last_Out_Bit3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Out_Bit0_prev = Out_Bit0;
	Out_Bit1_prev = Out_Bit1;
	Out_Bit2_prev = Out_Bit2;
	Out_Bit3_prev = Out_Bit3;
end

// update expected /o prevs

always @(trigger)
begin
	Out_Bit0_expected_prev = Out_Bit0_expected;
	Out_Bit1_expected_prev = Out_Bit1_expected;
	Out_Bit2_expected_prev = Out_Bit2_expected;
	Out_Bit3_expected_prev = Out_Bit3_expected;
end



// expected Out_Bit0
initial
begin
	Out_Bit0_expected = 1'bX;
end 

// expected Out_Bit1
initial
begin
	Out_Bit1_expected = 1'bX;
end 

// expected Out_Bit2
initial
begin
	Out_Bit2_expected = 1'bX;
end 

// expected Out_Bit3
initial
begin
	Out_Bit3_expected = 1'bX;
end 
// generate trigger
always @(Out_Bit0_expected or Out_Bit0 or Out_Bit1_expected or Out_Bit1 or Out_Bit2_expected or Out_Bit2 or Out_Bit3_expected or Out_Bit3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Out_Bit0 = %b | expected Out_Bit1 = %b | expected Out_Bit2 = %b | expected Out_Bit3 = %b | ",Out_Bit0_expected_prev,Out_Bit1_expected_prev,Out_Bit2_expected_prev,Out_Bit3_expected_prev);
	$display("| real Out_Bit0 = %b | real Out_Bit1 = %b | real Out_Bit2 = %b | real Out_Bit3 = %b | ",Out_Bit0_prev,Out_Bit1_prev,Out_Bit2_prev,Out_Bit3_prev);
`endif
	if (
		( Out_Bit0_expected_prev !== 1'bx ) && ( Out_Bit0_prev !== Out_Bit0_expected_prev )
		&& ((Out_Bit0_expected_prev !== last_Out_Bit0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out_Bit0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_Bit0_expected_prev);
		$display ("     Real value = %b", Out_Bit0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_Bit0_exp = Out_Bit0_expected_prev;
	end
	if (
		( Out_Bit1_expected_prev !== 1'bx ) && ( Out_Bit1_prev !== Out_Bit1_expected_prev )
		&& ((Out_Bit1_expected_prev !== last_Out_Bit1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out_Bit1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_Bit1_expected_prev);
		$display ("     Real value = %b", Out_Bit1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out_Bit1_exp = Out_Bit1_expected_prev;
	end
	if (
		( Out_Bit2_expected_prev !== 1'bx ) && ( Out_Bit2_prev !== Out_Bit2_expected_prev )
		&& ((Out_Bit2_expected_prev !== last_Out_Bit2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out_Bit2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_Bit2_expected_prev);
		$display ("     Real value = %b", Out_Bit2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Out_Bit2_exp = Out_Bit2_expected_prev;
	end
	if (
		( Out_Bit3_expected_prev !== 1'bx ) && ( Out_Bit3_prev !== Out_Bit3_expected_prev )
		&& ((Out_Bit3_expected_prev !== last_Out_Bit3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out_Bit3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_Bit3_expected_prev);
		$display ("     Real value = %b", Out_Bit3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Out_Bit3_exp = Out_Bit3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Memoria_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Bit_0;
reg Bit_1;
reg Bit_2;
reg Bit_3;
reg mem_read;
reg Mem_Write;
reg Sel_0;
reg Sel_1;
// wires                                               
wire Out_Bit0;
wire Out_Bit1;
wire Out_Bit2;
wire Out_Bit3;

wire sampler;                             

// assign statements (if any)                          
Memoria i1 (
// port map - connection between master ports and signals/registers   
	.Bit_0(Bit_0),
	.Bit_1(Bit_1),
	.Bit_2(Bit_2),
	.Bit_3(Bit_3),
	.mem_read(mem_read),
	.Mem_Write(Mem_Write),
	.Out_Bit0(Out_Bit0),
	.Out_Bit1(Out_Bit1),
	.Out_Bit2(Out_Bit2),
	.Out_Bit3(Out_Bit3),
	.Sel_0(Sel_0),
	.Sel_1(Sel_1)
);

// Bit_0
initial
begin
	Bit_0 = 1'b0;
	Bit_0 = #60000 1'b1;
	Bit_0 = #20000 1'b0;
end 

// Bit_1
initial
begin
	Bit_1 = 1'b0;
	Bit_1 = #60000 1'b1;
	Bit_1 = #20000 1'b0;
end 

// Bit_2
initial
begin
	Bit_2 = 1'b0;
	Bit_2 = #60000 1'b1;
	Bit_2 = #20000 1'b0;
end 

// Bit_3
initial
begin
	Bit_3 = 1'b0;
	Bit_3 = #60000 1'b1;
	Bit_3 = #20000 1'b0;
end 

// mem_read
initial
begin
	mem_read = 1'b0;
	mem_read = #290000 1'b1;
	mem_read = #10000 1'b0;
end 

// Mem_Write
initial
begin
	Mem_Write = 1'b0;
	Mem_Write = #60000 1'b1;
	Mem_Write = #20000 1'b0;
end 

// Sel_0
initial
begin
	Sel_0 = 1'b0;
end 

// Sel_1
initial
begin
	Sel_1 = 1'b0;
end 

Memoria_vlg_sample_tst tb_sample (
	.Bit_0(Bit_0),
	.Bit_1(Bit_1),
	.Bit_2(Bit_2),
	.Bit_3(Bit_3),
	.mem_read(mem_read),
	.Mem_Write(Mem_Write),
	.Sel_0(Sel_0),
	.Sel_1(Sel_1),
	.sampler_tx(sampler)
);

Memoria_vlg_check_tst tb_out(
	.Out_Bit0(Out_Bit0),
	.Out_Bit1(Out_Bit1),
	.Out_Bit2(Out_Bit2),
	.Out_Bit3(Out_Bit3),
	.sampler_rx(sampler)
);
endmodule

