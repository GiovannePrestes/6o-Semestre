// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2019 12:10:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mem_4x16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mem_4x16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bit_0;
reg bit_1;
reg bit_2;
reg bit_3;
reg Mem_Read;
reg Mem_write;
reg Sel_0;
reg Sel_1;
reg Sel_2;
reg Sel_3;
// wires                                               
wire bit_led_0;
wire bit_led_1;
wire bit_led_2;
wire bit_led_3;
wire OUT_0;
wire OUT_1;
wire OUT_2;
wire OUT_3;
wire [3:0] probe;

// assign statements (if any)                          
mem_4x16 i1 (
// port map - connection between master ports and signals/registers   
	.bit_0(bit_0),
	.bit_1(bit_1),
	.bit_2(bit_2),
	.bit_3(bit_3),
	.bit_led_0(bit_led_0),
	.bit_led_1(bit_led_1),
	.bit_led_2(bit_led_2),
	.bit_led_3(bit_led_3),
	.Mem_Read(Mem_Read),
	.Mem_write(Mem_write),
	.OUT_0(OUT_0),
	.OUT_1(OUT_1),
	.OUT_2(OUT_2),
	.OUT_3(OUT_3),
	.probe(probe),
	.Sel_0(Sel_0),
	.Sel_1(Sel_1),
	.Sel_2(Sel_2),
	.Sel_3(Sel_3)
);
initial 
begin 
#1000000 $finish;
end 

// Sel_0
initial
begin
	Sel_0 = 1'b0;
end 

// Sel_1
initial
begin
	Sel_1 = 1'b0;
end 

// Sel_2
initial
begin
	Sel_2 = 1'b0;
end 

// Sel_3
initial
begin
	Sel_3 = 1'b0;
end 

// bit_0
initial
begin
	bit_0 = 1'b0;
	bit_0 = #20000 1'b1;
	bit_0 = #60000 1'b0;
end 

// bit_1
initial
begin
	bit_1 = 1'b0;
end 

// bit_2
initial
begin
	bit_2 = 1'b0;
	bit_2 = #20000 1'b1;
	bit_2 = #60000 1'b0;
end 

// bit_3
initial
begin
	bit_3 = 1'b0;
	bit_3 = #20000 1'b1;
	bit_3 = #60000 1'b0;
end 

// Mem_Read
initial
begin
	Mem_Read = 1'b0;
	Mem_Read = #120000 1'b1;
	Mem_Read = #40000 1'b0;
end 

// Mem_write
initial
begin
	Mem_write = 1'b0;
	Mem_write = #20000 1'b1;
	Mem_write = #50000 1'b0;
end 
endmodule

