package aula;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.JOptionPane;
/*
 * FrmJogo.java
 *
 * Created on 7 de Março de 2007, 19:52
 */

/**
 *
 * @author  Glauco
 */
public class FrmJogo extends javax.swing.JFrame implements Runnable {
    
    
    
    /** Controle do teclado */
    
    
    private ArrayList <Elemento> elementos = new ArrayList <Elemento>();
    private ArrayList<Inimigo> inimigo = new ArrayList<Inimigo>();
    private Nave nave;
    
    
    /** Creates new form FrmJogo */
    public FrmJogo() {
        
        initComponents();
        this.setSize(800,600);
        createBufferStrategy(2);
        
        createElements();
        
        Thread t = new Thread(this);
        t.start();        
    }
    void createElements(){
//        for(int i = 0; i<16; i++){
//            inimigo.add(new Inimigo(Color.GREEN));
//            inimigo.get(i).setX(30);
//            inimigo.get(i).setY(getHeight()/(i+1)+inimigo.get(i).getLargura());
//            
//        }
        int rand;
        for(int i = 4; i<20; i+=2){
            rand = (int) (Math.random()*-200);
            inimigo.add(new Inimigo(Color.GREEN, rand-200, 25*i, 500, 50, 4));
            inimigo.add(new Inimigo(Color.BLUE, getWidth()-rand, 25*i, 500, 50, -4));
        }
        
        elementos.addAll(inimigo);
        nave = new Nave(Color.WHITE, getWidth()/2, 30, 45, 45, 1);
        elementos.add(nave);
//        nave.setColor(Color.MAGENTA);
//        nave.setLargura(120);
//        nave.setAltura(40);
//        nave.setX(200);
//        nave.setY(getHeight()-nave.getAltura());
//        nave.setIncX(0);
//        elementos.add(nave);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
    }//GEN-LAST:event_formKeyReleased
        
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }
    
    
    public void run() {
        
            Inimigo amigo = null;
   
        while(true) {
            Graphics g = getBufferStrategy().getDrawGraphics();
            //Limpa a Tela
            g.setColor(Color.BLACK);
            g.fillRect(0,0,this.getWidth(),this.getHeight());
            for(Elemento e: elementos) {
                e.desenhar(g);
            }
           
            for(Elemento e: elementos) {
                e.mover();
            }
            for(Inimigo inim: inimigo){
                if(inim.colisao(nave)){
                    if(inim != amigo){
                        amigo = inim;
                        inim.setIncX(inim.getIncX()*-1);
                    }
                    nave.setIncY(0);
                    nave.setY(nave.getY()-1);
                }
            }
            nave.setIncY(1);
        
            for(Inimigo in: inimigo){
                for(Inimigo in2: inimigo){
                    if(in.colisao(in2) && in != in2)
                    {
                       in.setIncX(in.getIncX()*-1);
                    }
                }
            }
            
            
                //Verifica Colisao Bola com Campo
            for(Inimigo ini: inimigo){
                
                if(ini.getX() > this.getWidth()-200) {
                        ini.setIncX(-4);
                }

                if(ini.getX() < -300) {
                        ini.setIncX(4);
                }

            }
            if(nave.getY() > getHeight())
                nave.setY(0);

            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
            
            
        }
        
        
        
        
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    
    
}






















